from itertools import count
from re import I
from tkinter import *
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import ttk


FONT = ('Arial', 12, 'normal')

root = Tk()
root.title("Матрица И")
root.geometry("1100x700+100+100")

arr = []

def check_next(cord_i, cord_j):
    tmp_i = int(node_number_button.get())
    tmp_j = int(edge_number_button.get())
    if tmp_i >= cord_i and tmp_j >= cord_j and cord_i >= 0 and cord_j >= 0:
        return True
    return False

def click(event):
    global arr
    cord_j = str(int((event.x-45)/30))
    cord_i = str(int((event.y-45)/30))
    string = cord_i + "_" + cord_j
    string2 = cord_j + "_" + cord_i
    if check_next(int(cord_i), int(cord_j)):
        if arr[int(cord_i)][int(cord_j)] == 0:
            canvas.itemconfigure(string, image=photo1)

            arr[int(cord_i)][int(cord_j)] = 1

        else:
            canvas.itemconfigure(string, image=photo0)

            arr[int(cord_i)][int(cord_j)] = 0


def on_leave(event):
    print(event)
    
def create_matrix():
    global arr
    canvas.delete('all')

    x = 60
    y = 30
    for i in range(1, int(edge_number_button.get())+1):
        canvas.create_text(x, y, text=f"{i}", font=FONT)
        x += 30

    x = 30
    y = 60
    for j in range(1, int(node_number_button.get())+1):
        canvas.create_text(x, y, text=f"{j}", font=FONT)
        y += 30

    y = 60
    arr = []
    for i in range(1, int(node_number_button.get())+1):
        x = 30
        tmp = []
        for j in range(1, int(edge_number_button.get())+1):
            x += 30
            string = str(i-1) + "_" + str(j-1)
            canvas.create_image(x, y, image=photo0, tag=string)
            canvas.tag_bind(string, '<Button-1>', click)
            #canvas.tag_bind(string, '<Button-1>', on_leave)
            tmp.append(0)
        arr.append(tmp)
        y += 30



def send_answer():
    map_me = {}
    print(arr)
    
    nodes_list = []
    for edge in range(len(arr[0])):
        counter = 0
        tmp_node = []
        for node in range(len(arr)):
            if arr[node][edge]:
                counter += 1
                tmp_node.append(node+1)
                #print(f"ребро {edge+1} соединяет вершину {node+1}")
        
        if counter == 2:
            print(f"ребро {edge+1} соединяет вершины {tmp_node}")
            nodes_list.append(tmp_node)
        elif not counter:
            print(f"ребро {edge+1} не соединяет вершины")
        else:
            print(f"WARNING! Ребро {edge+1} соединяет либо больше 2 вершин, либо 1")
        
    print(nodes_list)
    for pair in nodes_list:
        print(f"{pair[0]} с вершиной {pair[1]}")
        map_me[pair[0]] = []
        map_me[pair[1]] = []
        
    for pair in nodes_list:
        map_me[pair[0]].append(pair[1])
        map_me[pair[1]].append(pair[0])

    for key in map_me.keys():
        map_me[key] = set(map_me[key])
        map_me[key] = list(map_me[key])

    print(map_me)
    return map_me


top_canvas = Canvas(root, width=1100, height=50, bg='#fad7d4')
top_canvas.pack()

label_v = Label(text='Количество вершин', font=('Arial', 12, 'normal'))
label_v_win = top_canvas.create_window(100, 20, window=label_v)


node_number_button = ttk.Combobox(values=[i for i in range(1, 21)], font=('Arial', 12, 'normal'), width=10)
node_number_button_win = top_canvas.create_window(250, 20, window=node_number_button)
node_number_button.current(0)


label_r = Label(text='Количество ребер', font=('Arial', 12, 'normal'))
label_r_win = top_canvas.create_window(400, 20, window=label_r)

edge_number_button = ttk.Combobox(values=[i for i in range(1, 22)], font=('Arial', 12, 'normal'), width=10)
edge_number_button_win = top_canvas.create_window(550, 20, window=edge_number_button)
edge_number_button.current(0)


button_var_count = Button(text='Создать матрицу инцидентности',  font=('Arial', 10, 'normal'), command=create_matrix)
button_var_count_win = top_canvas.create_window(750, 20, window=button_var_count)

button_send = Button(text="Сохранить ответы", font=FONT, command=send_answer)
top_canvas.create_window(950, 20, window=button_send)

canvas = Canvas(root, width=1100, height=650, bg='#e0defa')
canvas.pack()


photo0 = tk.PhotoImage(file="img/0.png")
photo1 = tk.PhotoImage(file="img/1.png")

photo0_h = tk.PhotoImage(file="img/0_h.png")
photo1_h = tk.PhotoImage(file="img/1_h.png")

root.mainloop()
